import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind, mannwhitneyu, chi2_contingency


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
def load_data(file):
    try:
        data = pd.read_csv(file)
        return data
    except:
        return None


def main():
    st.set_page_config(page_title="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç", page_icon="üìä", layout="wide",
                       initial_sidebar_state="expanded")
    uploaded_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ csv —Ñ–∞–π–ª', type=['csv'])
    if uploaded_file is not None:
        data = load_data(uploaded_file)
        if data is not None:
            st.write('–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞')
            st.write(data.head())
            columns = data.columns
            col1, col2 = st.columns(2)

            with col1:
                selected_col1 = st.selectbox('–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 1:', [""] + columns)
            with col2:
                selected_col2 = st.selectbox('–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é 2:', [""] + columns)

            if selected_col1 and selected_col2 and selected_col1 != selected_col2:
                col3, col4 = st.columns(2)
                with col3:
                    categorical_col1 = st.checkbox('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 1 - –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è', False)
                    if categorical_col1:
                        plt.figure(figsize=(8, 6))
                        data[selected_col1].value_counts().plot(kind='pie', autopct="%1.1f%%")
                        st.pyplot(plt.gcf())
                        plt.close()
                    else:
                        plt.figure(figsize=(10, 6))
                        sns.histplot(data[selected_col1], kde=True)
                        st.pyplot(plt.gcf())
                        plt.close()
                with col4:
                    categorical_col2 = st.checkbox('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è 2 - –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è', False)
                    if categorical_col2:
                        plt.figure(figsize=(8, 6))
                        data[selected_col2].value_counts().plot(kind="pie", autopct="%1.1f%%")
                        st.pyplot(plt.gcf())
                        plt.close()
                    else:
                        plt.figure(figsize=(10, 6))
                        sns.histplot(data[selected_col2], kde=True)
                        st.pyplot(plt.gcf())
                        plt.close()
                st.write('## –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:')
                st.write('''–ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–≤–µ –≥–∏–ø–æ—Ç–µ–∑—ã H0 –∏ H1:\n
    –ü–æ–¥ H0 (–Ω—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞) –æ–±—ã—á–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –∏–¥–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –Ω–∏–∫–∞–∫ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π, –∞ –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã.\n
    –ü–æ–¥ H1 (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞) —á–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ —Å–ª—É—á–∞–π–Ω—ã –∏ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–∏–º—ã–º–∏.''')
                test_option = st.selectbox('', ['–ù–µ—Ç', 'T-test', 'Mann-Whitney U-test', 'Chi-square test'])
                if test_option != '–ù–µ—Ç':
                    st.write('## –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:')
                    if test_option == 'Chi-square test' and (categorical_col1 or categorical_col2):
                        if categorical_col1 and categorical_col2:
                            contingency_table = pd.crosstab(data[selected_col1], data[selected_col2])
                            _, p_value, _, _ = chi2_contingency(contingency_table)
                            st.write(f'P-value: {p_value:.5f}')

                            if p_value < 0.05:
                                st.write('–†–∞–∑–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã')
                            else:
                                st.write('–†–∞–∑–ª–∏—á–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–º–∏')
                        else:
                            st.write('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º–∏')
                    elif (test_option == 'T-test' or test_option == 'Mann-Whitney U-test') and not (
                            categorical_col1 or categorical_col2):
                        if test_option == 'T-test':
                            stat, p_value = ttest_ind(data[selected_col1], data[selected_col2])
                        else:
                            stat, p_value = mannwhitneyu(data[selected_col1], data[selected_col2])

                        st.write(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞: {stat}')
                        st.write(f'P-value: {p_value:.5f}')

                        if p_value < 0.05:
                            st.write('–†–∞–∑–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã')
                        else:
                            st.write('–†–∞–∑–ª–∏—á–∏—è –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–º–∏')


if __name__ == '__main__':
    main()
